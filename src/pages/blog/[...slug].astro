---
import type { InferGetStaticPropsType } from "astro";

import { getBlogPostEntries, createRelated } from "@lib/contents/blog";
import { dateText } from "@lib/utils";

import BlogLayout from "@layouts/BlogLayout.astro";
import SiblingsLinkContainer from "@components/blog/SiblingsLinkContainer.astro";
import TagContainer from "@components/blog/TagContainer.svelte";
import BlogTOC from "@components/blog/BlogTOC.astro";

export async function getStaticPaths() {
  const blogPostEntries = await getBlogPostEntries();

  return blogPostEntries.map((entry, i, array) => {
    const next = i === 0 ? null : array.at(i - 1) ?? null;
    const prev = i === array.length ? null : array.at(i + 1) ?? null;
    const related = createRelated(array, entry);
    return {
      params: { slug: entry.id },
      props: { entry, next, prev, related },
    };
  });
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry, next, prev, related } = Astro.props;
const {
  title,
  description,
  Content,
  createdAt,
  updatedAt,
  thumbnail,
  tags,
  latex,
  wordCount,
  headings,
  draft: isDraft,
} = entry;

const ogp = {
  url: Astro.request.url,
  type: "blog",
  title: `Under Construction | blog | ${title}`,
  description,
  siteName: "Under Construction",
  image:
    "https://aiwaka.github.io" +
    (thumbnail.url ?? "/under-construction/img/blue_2.png"),
};
---

<BlogLayout ogp={ogp} title={title} usingLatex={latex}>
  {
    isDraft && (
      <p style="color: red;">
        この記事はdraftです。ビルド結果には含まれません。
      </p>
    )
  }
  <h1>{title}</h1>
  <div class="date-block">
    <span>
      {dateText(createdAt)}
      {
        dateText(createdAt) !== dateText(updatedAt) && (
          <Fragment>（{dateText(updatedAt)} 追記）</Fragment>
        )
      }
    </span>
  </div>

  <TagContainer tagList={tags} />
  {
    /* NOTE: この文字数カウントが正確か検証はしていない. 大体あっていそうだが... */
  }
  <div class="word-count">
    <span>文字数：{wordCount}</span>
  </div>
  <div class="img-container">
    <img
      src={thumbnail.url}
      width={thumbnail.width}
      height={thumbnail.height}
      alt={thumbnail.alt}
      loading="eager"
      decoding="async"
    />
  </div>
  <div class="blog-article-content-container">
    <BlogTOC headings={headings} />
    {typeof Content === "string" ? <div set:html={Content} /> : <Content />}
  </div>
  <SiblingsLinkContainer next={next} prev={prev} />
  <h2>関連記事</h2>
  <div class="related-articles-container">
    {
      related.map(({ id, title, factor }) => {
        return (
          <a
            class="article-link"
            href={`${import.meta.env.BASE_URL}blog/${id}`}
          >
            <div class="related-article">
              <span>{title}</span>
              {factor !== "specified" && <TagContainer tagList={factor} />}
            </div>
          </a>
        );
      })
    }
  </div>
</BlogLayout>

<style>
  .img-container {
    border: 4px solid var(--main-font-color);
    width: 100%;
    height: 45vh;
    clip: rect(0, 0, 0, 0);
    margin: 3rem auto;
  }
  .img-container > img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  .blog-article-content-container {
    line-height: 1.8rem;

    & :global(a) {
      color: darkgoldenrod;
      &:hover {
        color: orangered;
      }
    }
    & :global(h2) {
      margin-top: 4rem;
      margin-bottom: 1.4rem;
    }
    & :global(h3) {
      margin-top: 2.5rem;
    }
    & :global(p) {
      margin: 1.5rem 1rem;
      @media (max-width: 1024px) {
        margin: 1.5rem 0;
      }
    }
    & :global(img) {
      width: 100%;
      height: auto;
    }
    & :global(ul, ol) {
      margin: auto 1rem;
      padding-left: 1.6rem;
    }
    & :global(blockquote) {
      margin: 0 1rem;
      /* paddingの縦が0だとpタグのmarginと相殺されるため微小量を設定する */
      padding: 1px 0.8rem;
      background-color: rgba(var(--main-font-color-params), 0.2);
      border-radius: 10px;
    }
    & :global(nav.toc) {
      & :global(.toc-link) {
        color: var(--main-font-color);
        &:hover {
          color: orangered;
        }
      }
      padding: 0.8rem 1.2rem;
      background-color: rgba(200, 200, 200, 0.5);
      border-radius: 5px;
      & :global(ol) {
        margin-left: 1.6rem;
      }
    }
  }

  /* h2, h3見出し開始位置を崩さない処理と, 見出し上でホバーしたらアンカーリンク（#文字）が表示される処理. */
  .blog-article-content-container {
    & :global(span.anchor-link) {
      display: inline-block;
      width: 1rem;
      margin-left: -1rem;
      color: transparent;
    }
    & :global(h2:hover span.anchor-link) {
      color: inherit;
    }
    & :global(h3:hover span.anchor-link) {
      color: inherit;
    }
  }
  /* 脚注の下の<p>タグの行間を詰める処理 NOTE: むしろrehypeで<p>タグを取ってもいいかもしれない. */
  .blog-article-content-container {
    & :global(h2#footnote-label + ol) {
      margin: 1.7rem 1rem;
      & :global(p) {
        margin-top: 0;
        margin-bottom: 0;
      }
    }
  }

  .related-articles-container {
    display: flex;
    flex-direction: column;
    margin: 1rem 0;
    & .article-link {
      border: 1px solid var(--main-font-color);
      border-bottom: 0;
      background-color: rgba(var(--main-bg-color-params), 0.6);
      &:last-child {
        border: 1px solid var(--main-font-color);
      }
    }
    & .article-link:hover {
      background-color: var(--main-font-color);
      color: var(--main-bg-color);
    }
    & .related-article {
      padding: 1.1rem 1rem;
    }
  }
</style>

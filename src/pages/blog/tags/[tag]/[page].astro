---
import { getCollection } from "astro:content";
import type { GetStaticPathsOptions, Page } from "astro";

import type { FinalBlogCollectionEntry } from "@lib/schema";
import { getAllTagSet, getBlogPostEntries, POST_PER_PAGE } from "@lib/utils";

import BlogGeneralLayout from "@layouts/BlogGeneralLayout.astro";
import ArticleCardContainer from "@components/blog/ArticleCardContainer.astro";
import PaginationContainer from "@components/blog/PaginationContainer.astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allBlogPosts = await getCollection("blog");
  const allTagList = Array.from(getAllTagSet(allBlogPosts));
  return Promise.all(
    allTagList.map(async (tag) => {
      const blogPostEntries = await getBlogPostEntries(allBlogPosts, { tag });
      return paginate(blogPostEntries, {
        params: { tag },
        pageSize: POST_PER_PAGE,
      });
    })
  );
}

interface Props {
  page: Page<FinalBlogCollectionEntry>;
}
const { page } = Astro.props;
const { tag } = Astro.params;
const ogp = {
  url: Astro.request.url,
  type: "blog",
  title: `Under Construction | Blog | #${tag}の検索結果`,
  description: "ブログ記事のタグ検索結果",
  siteName: "Under Construction",
  image: "https://littleikawa.github.io/under-construction/img/blue_2.png",
};
---

<BlogGeneralLayout ogp={ogp}>
  <h2>Blog</h2>
  <a class="to-tag-list" href={`${import.meta.env.BASE_URL}blog/tags`}>
    タグ一覧へ
  </a>
  <h3>#{tag}の検索結果：{page.currentPage}</h3>
  <ArticleCardContainer cardList={page.data} />
  <PaginationContainer
    subbase={`blog/tags/${tag}/`}
    currentPage={page.currentPage}
    lastPage={page.lastPage}
  />
</BlogGeneralLayout>

<style>
  .to-tag-list {
    text-decoration: underline;
  }
</style>

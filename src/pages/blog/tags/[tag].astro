---
import { getCollection } from "astro:content";
import ArticleCardContainer from "@components/blog/ArticleCardContainer.astro";
import PaginationContainer from "@components/blog/PaginationContainer.astro";
import BlogGeneralLayout from "@layouts/BlogGeneralLayout.astro";
import { getAllTagSet, getBlogPostEntries, POST_PER_PAGE } from "@lib/utils";
import type { FinalBlogCollectionEntry } from "@lib/schema";

export async function getStaticPaths() {
  const allBlogPosts = await getCollection("blog");
  const allTagList = Array.from(getAllTagSet(allBlogPosts));
  return await Promise.all(
    allTagList.map(async (tag) => ({
      params: {
        tag,
      },
      props: {
        blogPostEntries: await getBlogPostEntries(allBlogPosts, { tag }),
      },
    }))
  );
}

interface Props {
  blogPostEntries: FinalBlogCollectionEntry[];
}

const { tag } = Astro.params;
const { blogPostEntries } = Astro.props;
blogPostEntries.sort((a, b) => (a.data.date < b.data.date ? 1 : -1));

const pageNum = Math.ceil(blogPostEntries.length / POST_PER_PAGE);
const ogp = {
  url: Astro.request.url,
  type: "blog",
  title: `Under Construction | Blog | #${tag}の検索結果`,
  description: "ブログ記事のタグ検索結果",
  siteName: "Under Construction",
  image: "https://littleikawa.github.io/under-construction/img/blue_2.png",
};
---

<BlogGeneralLayout ogp={ogp}>
  <h2>Blog</h2>
  <a class="to-tag-list" href={`${import.meta.env.BASE_URL}blog/tags`}>
    タグ一覧へ
  </a>
  <h3>#{tag}の検索結果</h3>
  <ArticleCardContainer cardList={blogPostEntries.slice(0, POST_PER_PAGE)} />

  <PaginationContainer
    subbase={`blog/tags/${tag}/`}
    currentPage={1}
    lastPage={pageNum}
  />
</BlogGeneralLayout>

<style>
  .to-tag-list {
    text-decoration: underline;
  }
</style>

---
/**
 * 画像を指定するオブジェクトのリストまたは単体を受け取る。
 * 形式によりリモートかローカルかを判断して対応するコンポーネントに渡す。
 * それらのコンポーネントでは画像を取得・最適化する処理を行い、同一のコンポーネントに情報を渡して描画する。
 */

import type { BlogImageProps } from "@lib/contents/blog";

import BlogImageRemote from "./BlogImageRemote.astro";
import BlogImageLocal from "./BlogImageLocal.astro";

// TODO: コンポーネント名変更（その後コミットをもとに戻し変更を圧縮する）
// TODO: 以下の型はBlogImageRemoteなどのコンポーネントで定義し、エクスポートされたものを使うよう変更する
// TODO: スニペットとscaffdogを修正
// station collectionsでも同様の画像コンポーネントを使うよう修正
type BlogImagePropsOmitSrc = Omit<BlogImageProps, "src">;
type AllowedImageExtension = "jpg" | "jpeg" | "png";
type LocalImageType = BlogImagePropsOmitSrc & {
  src: `${string}.${AllowedImageExtension}`;
};
type NamedRemoteImageType = BlogImagePropsOmitSrc & {
  /** リモートコンテンツID指定の上書きをする */
  baseName?: string;
  name: string;
};
type BlogImage = LocalImageType | NamedRemoteImageType;

interface Props {
  baseName?: string;
  images: BlogImage[] | BlogImage;
  globalAttrs: Record<string, any>;
}
const { baseName: defaultBaseName, images, ...globalAttrs } = Astro.props;
// かならずArrayになるように型を操作する
const list = Array.isArray(images) ? images : [images];

const isRemoteImage = (img: BlogImage): img is NamedRemoteImageType => {
  return Object.hasOwn(img, "name");
};
---

<div class="image-container">
  {
    list.map((img) => {
      if (isRemoteImage(img)) {
        if (defaultBaseName === undefined) {
          if (import.meta.env.DEV) {
            return (
              <div>
                [BlogImagesList] baseName must be specified to use remote image
              </div>
            );
          } else {
            throw Error(
              "[BlogImagesList] baseName must be specified to use remote image",
            );
          }
        } else {
          const { baseName, name, width, height, alt, caption } = img;
          return (
            <BlogImageRemote
              baseName={baseName ?? defaultBaseName}
              image={{
                name,
                width,
                height,
                alt,
                caption,
              }}
              {...globalAttrs}
            />
          );
        }
      } else {
        const { src, width, height, alt, caption, ...attrs } = img;
        return (
          <BlogImageLocal
            image={{
              src,
              width,
              height,
              alt,
              caption,
            }}
            {...globalAttrs}
          />
        );
      }
    })
  }
</div>

<style>
  .image-container {
    display: flex;
    flex-wrap: nowrap;
    justify-content: space-around;
    align-items: flex-end;
    @media (max-width: 1024px) {
      flex-direction: column;
    }
  }
</style>

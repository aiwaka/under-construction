---
/**
 * 画像を指定するオブジェクトのリストまたは単体を受け取る。
 * 形式によりリモートかローカルかを判断して対応するコンポーネントに渡す。
 * それらのコンポーネントでは画像を取得・最適化する処理を行い、同一のコンポーネントに情報を渡して描画する。
 */

import type { ComponentProps } from "astro/types";
import BlogImageRemote from "./BlogImageRemote.astro";
import BlogImageLocal from "./BlogImageLocal.astro";

// TODO: station collectionsでも同様の画像コンポーネントを使うよう修正
type LocalBlogImageType = ComponentProps<typeof BlogImageLocal>["image"];
type NamedRemoteImageType = ComponentProps<typeof BlogImageRemote>["image"];
type BlogImage =
  | LocalBlogImageType
  | (NamedRemoteImageType & {
      /** リモートコンテンツID指定の上書きをする */
      baseName?: string;
    });

interface Props {
  baseName?: string;
  images: BlogImage[] | BlogImage;
  globalAttrs: Record<string, any>;
}
const { baseName: defaultBaseName, images, ...globalAttrs } = Astro.props;
// かならずArrayになるように型を操作する
const list = Array.isArray(images) ? images : [images];

const isRemoteImage = (img: BlogImage): img is NamedRemoteImageType => {
  return Object.hasOwn(img, "name");
};
---

<div class="image-container">
  {
    list.map((img) => {
      if (isRemoteImage(img)) {
        if (defaultBaseName === undefined && img.baseName === undefined) {
          if (import.meta.env.DEV) {
            return (
              <div>
                [BlogImagesList] baseName must be specified to use remote image
              </div>
            );
          } else {
            throw Error(
              "[BlogImagesList] baseName must be specified to use remote image",
            );
          }
        } else {
          const { baseName, ...rest } = img;
          return (
            <BlogImageRemote
              baseName={img.baseName ?? defaultBaseName!}
              image={rest}
              {...globalAttrs}
            />
          );
        }
      } else {
        return <BlogImageLocal image={img} {...globalAttrs} />;
      }
    })
  }
</div>

<style>
  .image-container {
    display: flex;
    flex-wrap: nowrap;
    justify-content: space-around;
    align-items: flex-end;
    @media (max-width: 1024px) {
      flex-direction: column;
    }
  }
</style>

---
/**
 * ページ遷移ボタンを管理する
 */

interface Props {
  /** ページ番号とオリジンを除いたurlの部分文字列. ex: `blog/` */
  subbase: string;
  /** 最後のページ番号 */
  lastPage: number;
  /** 現在のページ番号 */
  currentPage: number;
}

const { subbase, lastPage, currentPage } = Astro.props;
const base = `${import.meta.env.BASE_URL}${subbase}`;
const range = (num: number) => [...Array(num)].map((_, i) => i);

const isFirstPage = currentPage === 1;
const isLastPage = currentPage === lastPage;
---

{
  lastPage > 1 && (
    <div class="pagination-section">
      <div class="pagination-container">
        <a href={`${base}1`} class:list={{ disabled: isFirstPage }}>
          <div class="page-button">
            <span>&lt;&lt;</span>
          </div>
        </a>
        <a
          href={`${base}${currentPage - 1}`}
          class:list={{ disabled: isFirstPage }}
        >
          <div class="page-button">
            <span>&lt;</span>
          </div>
        </a>

        {/* 5つ分の遷移ボタンを作るが, 存在しないページはdisabledとする. */}
        {range(5).map((num) => {
          const temp = num + currentPage - 2;
          const disabled = !range(lastPage).includes(temp - 1);
          const current = num === 2;
          return (
            <a href={`${base}${temp}`} class:list={{ disabled }}>
              <div
                class="page-button"
                class:list={["page-button", { current }]}
              >
                <span>{!disabled && temp}</span>
              </div>
            </a>
          );
        })}
        <a
          href={`${base}${currentPage + 1}`}
          class:list={{ disabled: isLastPage }}
        >
          <div class="page-button">
            <span>&gt;</span>
          </div>
        </a>
        <a href={`${base}${lastPage}`} class:list={{ disabled: isLastPage }}>
          <div class="page-button">
            <span>&gt;&gt;</span>
          </div>
        </a>
      </div>
    </div>
  )
}
<style>
  .pagination-section {
    width: 100%;
    display: flex;
    justify-content: center;
    margin: 2rem auto;
  }
  .pagination-container {
    display: flex;
    width: fit-content;
    & a.disabled {
      pointer-events: none;
      & .page-button {
        color: gray;
        background-color: transparent;
        border: 1px dashed gray;
        cursor: auto;
      }
    }
    & .page-button {
      text-align: center;
      width: 2rem;
      height: 2rem;
      border: 1px solid var(--main-font-color);
      border-radius: 2px;
      background-color: var(--main-bg-color);
      & span {
        display: inline-block;
        line-height: 2rem;
      }
      &:hover {
        cursor: pointer;
        color: var(--main-bg-color);
        background-color: rgba(var(--main-font-color-params), 0.5);
      }
      &.current {
        background-color: var(--main-font-color);
        color: var(--main-bg-color);
        cursor: auto;
      }
    }
  }
</style>

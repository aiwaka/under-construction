---
import fs from "node:fs";

import ImageComponent from "@components/utils/ImageComponent.astro";
import type { RemoteBlogImageDataSchema } from "@lib/schema/blog";
import { getImage } from "astro:assets";
import type { GetImageResult } from "astro";

export interface NamedRemoteImageType {
  name: string;
  width: number;
  height?: number;
  alt?: string;
  caption?: string;
}
interface Props {
  baseName: string;
  image: NamedRemoteImageType;
}
const { baseName, image: namedImage } = Astro.props;

/** 何らかの理由で取得に失敗したときに`true`になる */
let imagesDataFetchFailed = false;

// NOTE: `import.meta.url`はこのコンポーネントの完全パスを返す. そこから`dist/...`までたどり着けるようにする.
// `dist/generated/`にはintegrationにより`images-data.json`がコピーされているものとする.
const dataDir = import.meta.env.DEV
  ? "../../generated/images-data.json"
  : "../../dist/generated/images-data.json";
const resolvedDataPath = new URL(dataDir, import.meta.url);
if (!fs.existsSync(resolvedDataPath)) {
  const errorMessage =
    "Images data does not exist. Check the path settings output to the console." +
    `\n\`import.meta.url\` : ${import.meta.url}` +
    `\nreferencing path (\`path.href\`) : ${resolvedDataPath.href}`;
  console.error(errorMessage);
  imagesDataFetchFailed = true;
}

let allImagesData: RemoteBlogImageDataSchema | null = null;
if (!imagesDataFetchFailed) {
  allImagesData = JSON.parse(
    fs.readFileSync(resolvedDataPath, "utf8"),
  ) as RemoteBlogImageDataSchema;
}

const {
  name,
  width: specifiedWidth,
  height: specifiedHeight,
  ...rest
} = namedImage;
const imagesData = allImagesData?.[baseName];
const image = imagesData?.images[namedImage.name];
let imageResult: GetImageResult | null = null;
if (imagesData === undefined) {
  const errorMessage = `The specified basename \`${baseName}\` cannot be found.`;
  console.error(errorMessage);
  imagesDataFetchFailed = true;
} else if (image === undefined) {
  const errorMessage = `The specified name \`${namedImage.name}\` cannot be found.`;
  console.error(errorMessage);
  imagesDataFetchFailed = true;
} else {
  // widthはクエリで指定する（基本元の画像より小さめのサイズを指定するはずなので）.
  const queriedUrl = `${image.url}?w=${specifiedWidth}&fm=webp`;
  // 高さは指定されていればそれを使い, そうでなければ画像の大きさから計算する（整数にする）.
  const resultHeight = Math.round(
    specifiedHeight ?? (specifiedWidth * image.height) / image.width,
  );
  imageResult = await getImage({
    src: queriedUrl,
    width: specifiedWidth,
    height: resultHeight,
    ...rest,
  });
}
---

{
  imagesDataFetchFailed || imageResult === null ? (
    <div style="color: red; border: 1px solid red;">Images Not Found</div>
  ) : (
    <ImageComponent
      src={imageResult.src}
      width={imageResult.options.width}
      height={imageResult.options.height}
      alt={imageResult.rawOptions.alt}
      caption={imageResult.rawOptions.caption}
    />
  )
}

---
import fs from "fs";

import BlogImageList from "@components/blog/BlogImageList.astro";
import type { BlogImageProps } from "@lib/contents/blog";
import type { ImagesStorageSchema } from "../../integrations/astro-load-microcms-image";

type NamedRemoteImageType = Omit<BlogImageProps, "src"> & {
  name: string;
};
export type Props = {
  baseName: string;
  images: NamedRemoteImageType | NamedRemoteImageType[];
};
const { baseName, images: namedRemoteImagesProp } = Astro.props;

// 配列にする
const namedRemoteImages = Array.isArray(namedRemoteImagesProp)
  ? namedRemoteImagesProp
  : [namedRemoteImagesProp];

/** 何らかの理由で取得に失敗した瞬間`true`になる */
let imagesDataFetchFailed = false;

// NOTE: `import.meta.url`はこのコンポーネントの完全パスを返す. そこから`dist/...`までたどり着けるようにする.
// `dist/generated/`にはintegrationにより`images-data.json`がコピーされているものとする.
const dataDir = import.meta.env.DEV
  ? "../../generated/images-data.json"
  : "../../dist/generated/images-data.json";
const resolvedDataPath = new URL(dataDir, import.meta.url);
if (!fs.existsSync(resolvedDataPath)) {
  const errorMessage =
    "Images data does not exist. Check the path settings output to the console." +
    `\n\`import.meta.url\` : ${import.meta.url}` +
    `\nreferencing path (\`path.href\`) : ${resolvedDataPath.href}`;
  console.error(errorMessage);
  imagesDataFetchFailed = true;
}

let allImagesData: ImagesStorageSchema | null = null;
if (!imagesDataFetchFailed) {
  allImagesData = JSON.parse(
    fs.readFileSync(resolvedDataPath, "utf8"),
  ) as ImagesStorageSchema;
}

const imagesData = allImagesData?.[baseName];
if (allImagesData && imagesData === undefined) {
  const errorMessage = `The specified basename \`${baseName}\` cannot be found.`;
  console.error(errorMessage);
  imagesDataFetchFailed = true;
}
const notFoundImageList: string[] = [];
// 取得できない画像は除外してリストを整形する.
const resolvedRemoteImages = namedRemoteImages.flatMap((data) => {
  const {
    name,
    width: specifiedWidth,
    height: specifiedHeight,
    ...rest
  } = data;
  const image = imagesData?.images[name];
  if (!image) {
    notFoundImageList.push(name);
    // []を返せばflatMapによりmapの結果から除外できる
    return [];
  }
  // widthはクエリで指定する（基本元の画像より小さめのサイズを指定するはずなので）.
  const queriedUrl = `${image.url}?w=${specifiedWidth}&fm=webp`;
  // 高さは指定されていればそれを使い, そうでなければ画像の大きさから計算する（整数にする）.
  const resultHeight = Math.round(
    specifiedHeight ?? (specifiedWidth * image.height) / image.width,
  );
  return {
    src: queriedUrl,
    width: specifiedWidth,
    height: resultHeight,
    name,
    ...rest,
  } satisfies BlogImageProps & { name: string };
});

const images = resolvedRemoteImages;

if (notFoundImageList.length > 0) {
  console.warn(
    `[BlogImagesRemote.astro] in ${baseName}, following named images were not found.`,
  );
  notFoundImageList.map((image) => {
    console.log(image);
  });
}
---

{
  imagesDataFetchFailed && (
    <div style="color: red; border: 1px solid red;">Images Not Found</div>
  )
}
<BlogImageList images={images} />

---
import type { ImageMetadata } from "astro";

import ImageComponent from "@components/utils/ImageComponent.astro";
import { getImage } from "astro:assets";

type AllowedImageExtension = "jpg" | "jpeg" | "png";

interface LocalBlogImageType {
  src: `${string}.${AllowedImageExtension}`;
  width: number;
  height?: number;
  alt?: string;
  caption?: string;
}
interface Props {
  image: LocalBlogImageType;
}

const { image: localImageProp } = Astro.props;

const globImages = import.meta.glob<ImageMetadata>("../../blog-images/**/*", {
  import: "default",
});

const imageResult = await getImage(
  await (async () => {
    const { src, ...rest } = localImageProp;
    const localImagePath = `../../blog-images/${src}`;

    // NOTE: 画像をdynamic importすることはViteの制約によりできない.
    // https://github.com/withastro/astro/issues/3373
    // このリンクを参考に, globを取得し, パスからモジュールを取得する構成にするとうまくビルドされた.
    // "@lib/schema/blog.ts"の処理も同様.
    // なお, Viteによる画像のdynamic importのdefaultプロパティはImageMetaData型を満たしている.

    const localImageMetaData = await globImages[localImagePath]();

    return {
      src: localImageMetaData,
      ...rest,
    };
  })(),
);
---

<ImageComponent
  src={imageResult.src}
  width={imageResult.options.width}
  height={imageResult.options.height}
  alt={imageResult.rawOptions.alt}
  caption={imageResult.rawOptions.caption}
/>
